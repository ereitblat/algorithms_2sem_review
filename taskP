import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
  public static final int mod = 1000000007;

  public static boolean pattern(int[] pattern, int str) {
    for (int i = 0; i < pattern.length; i++) {
      if ((pattern[i] != -1) && pattern[i] != ((str >> i) & 1)) {
        return false;
      }
    }
    return true;
  }

  public static boolean matching(int prevStr, int nextStr, int n) {
    for (int i = 0; i < n - 1; i++) {
      int cnt = 0;
      if (((prevStr >> i) & 1) == 1) {
        cnt += 1;
      }
      if (((nextStr >> i) & 1) == 1) {
        cnt += 1;
      }
      if (((prevStr >> (i + 1)) & 1) == 1) {
        cnt += 1;
      }
      if (((nextStr >> (i + 1)) & 1) == 1) {
        cnt += 1;
      }
      if (cnt != 2) {
        return false;
      }
    }
    return true;
  }

  public static void main(String[] args) throws IOException {
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    String[] num = bufferedReader.readLine().split(" ");
    int n = Integer.parseInt(num[0]);
    int m = Integer.parseInt(num[1]);
    int[][] data = new int[m][n];
    for (int i = 0; i < n; i++) {
      String[] str = bufferedReader.readLine().split("");
      for (int j = 0; j < m; j++) {
        if (str[j].equals("+")) {
          data[j][i] = 1;
        } else if (str[j].equals("-")) {
          data[j][i] = 0;
        } else {
          data[j][i] = -1;
        }
      }
    }
    int[][] dp = new int[m][1 << n];
    for (int firstMask = 0; firstMask < 1 << n; firstMask++) {
      if (pattern(data[0], firstMask)) {
        dp[0][firstMask] = 1;
      }
    }
    for (int ind = 1; ind < m; ind++) {
      for (int curMask = 0; curMask < 1 << n; curMask++) {
        if (pattern(data[ind - 1], curMask)) {
          if (pattern(data[ind], curMask)) {
            if (matching(curMask, curMask, n)) {
              dp[ind][curMask] += dp[ind - 1][curMask];
              dp[ind][curMask] %= mod;
            }
          }
          if (pattern(data[ind], curMask ^ ((1 << n) - 1))) {
            dp[ind][curMask ^ ((1 << n) - 1)] += dp[ind - 1][curMask];
            dp[ind][curMask ^ ((1 << n) - 1)] %= mod;
          }
        }
      }
    }
    int ans = 0;
    for (int i = 0; i < 1 << n; i++) {
      ans += dp[m - 1][i];
      ans %= mod;
    }
    System.out.println(ans);
  }
}
