import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.TreeSet;

public class Main {
  static class Node implements Comparable<Node> {
    public int vert;
    public int dist;

    public Node() {}

    public Node(int v, int d) {
      vert = v;
      dist = d;
    }

    public int compareTo(Node n) {
      if (dist > n.dist) {
        return -1;
      } else if (dist < n.dist) {
        return 1;
      }
      return Integer.compare(vert, n.vert);
    }
  }

  public static void main(String[] args) throws IOException {

    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    OutputStream outputStream = System.out;
    PrintWriter out = new PrintWriter(outputStream);

    String[] num = bufferedReader.readLine().split(" ");
    int k = Integer.parseInt(num[0]);

    for (int j = 0; j < k; j++) {

      String[] gr = bufferedReader.readLine().split(" ");
      int n = Integer.parseInt(gr[0]);
      int m = Integer.parseInt(gr[1]);

      ArrayList<int[]>[] graph = new ArrayList[n];
      int[] d = new int[n];

      for (int i = 0; i < n; i++) {
        ArrayList<int[]> list = new ArrayList<>();
        graph[i] = list;
        d[i] = 2009000999;
      }

      for (int i = 0; i < m; i++) {
        String[] data = bufferedReader.readLine().split(" ");
        int v1 = Integer.parseInt(data[0]);
        int v2 = Integer.parseInt(data[1]);
        int length = Integer.parseInt(data[2]);
        int[] cur = {v2, length};
        graph[v1].add(cur);
        int[] cur2 = {v1, length};
        graph[v2].add(cur2);
      }

      TreeSet<Node> heap = new TreeSet<>();

      int s = Integer.parseInt(bufferedReader.readLine().split(" ")[0]);
      d[s] = 0;
      heap.add(new Node(s, 0));

      boolean[] used = new boolean[n];
      Arrays.fill(used, false);

      while (!heap.isEmpty()) {
        int curMin = heap.pollLast().vert;
        int size = graph[curMin].size();
        if (used[curMin]) {
          continue;
        }
        used[curMin] = true;
        for (int i = 0; i < size; i++) {
          int to = graph[curMin].get(i)[0];
          int weight = graph[curMin].get(i)[1];
          if (d[to] > d[curMin] + weight) {
            d[to] = d[curMin] + weight;
            heap.add(new Node(to, d[to]));
          }
        }
      }
      for (int i = 0; i < n; i++) {
        out.print(d[i] + " ");
        if (i == n - 1) {
          out.print("\n");
        }
      }
      out.flush();
    }
  }
}
