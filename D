import java.io.*;
import java.util.ArrayList;

public class Main {
  public static void dfs(
      int v,
      int[] colour,
      int[] tin,
      int[] tout,
      int timer,
      ArrayList<Integer>[] graph,
      ArrayList<Integer> toutSort) {
    colour[v] = 1;
    tin[v] = timer++;
    int size = graph[v].size();
    for (int i = 0; i < size; i++) {
      int to = graph[v].get(i);
      if (colour[to] != 0) {
        continue;
      } else {
        dfs(to, colour, tin, tout, timer, graph, toutSort);
      }
    }
    colour[v] = 2;
    tout[v] = timer++;
    toutSort.add(v);
  }

  public static ArrayList<Integer> dfs(
      int v, int[] colour, ArrayList<Integer>[] backGraph, ArrayList<Integer> vertex) {
    vertex.add(v);
    colour[v] = 1;
    int size = backGraph[v].size();
    for (int i = 0; i < size; i++) {
      int to = backGraph[v].get(i);
      if (colour[to] != 0) {
        continue;
      } else {
        dfs(to, colour, backGraph, vertex);
      }
    }
    return vertex;
  }

  public static void main(String[] args) throws IOException {
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    OutputStream outputStream = System.out;
    PrintWriter out = new PrintWriter(outputStream);
    String[] num = bufferedReader.readLine().split(" ");
    int n = Integer.parseInt(num[0]);
    int m = Integer.parseInt(num[1]);
    ArrayList<Integer>[] graph = new ArrayList[n];
    ArrayList<Integer>[] backGraph = new ArrayList[n];
    int[] tin = new int[n];
    int[] tout = new int[n];
    ArrayList<Integer> toutSort = new ArrayList<>();
    int timer = 0;
    for (int i = 0; i < n; i++) {
      graph[i] = new ArrayList<>();
      backGraph[i] = new ArrayList<>();
    }
    for (int i = 0; i < m; i++) {
      String[] pair = bufferedReader.readLine().split(" ");
      graph[Integer.parseInt(pair[0]) - 1].add(Integer.parseInt(pair[1]) - 1);
      backGraph[Integer.parseInt(pair[1]) - 1].add(Integer.parseInt(pair[0]) - 1);
    }
    int[] colour = new int[n];
    for (int v = 0; v < n; v++) {
      if (colour[v] == 0) {
        dfs(v, colour, tin, tout, timer, graph, toutSort);
      }
    }
    int[] colour2 = new int[n];
    int amount = 0;
    int[] answer = new int[n];
    for (int i = n - 1; i >= 0; i--) {
      if (colour2[toutSort.get(i)] == 0) {
        ArrayList<Integer> vertex = new ArrayList<>();
        vertex = dfs(toutSort.get(i), colour2, backGraph, vertex);
        if (!vertex.isEmpty()) {
          amount += 1;
          for (int j = 0; j < vertex.size(); j++) {
            answer[vertex.get(j)] = amount;
          }
        }
      }
    }
    out.print(amount + "\n");
    for (int i = 0; i < n; i++) {
      out.print(answer[i] + " ");
    }
    out.flush();
  }
}
