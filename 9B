import java.io.*;
import java.util.Arrays;
import java.util.Comparator;

public class Main {
  public static int get(int v, int[] p) {
    if (p[v] == -1 || p[v] == v) {
      return v;
    }
    p[v] = get(p[v], p);
    return p[v];
  }

  public static void unite(int u, int v, int[] p, int[] size) {
    u = get(u, p);
    v = get(v, p);
    if (size[u] < size[v]) {
      int t = u;
      u = v;
      v = t;
    }
    p[v] = u;
    size[u] += size[v];
  }

  public static int check(int u, int v, int[] p) {
    u = get(u, p);
    v = get(v, p);
    if (u == v) {
      return 1;
    }
    return 0;
  }

  public static void main(String[] args) throws IOException {
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    String[] num = bufferedReader.readLine().split(" ");
    int n = Integer.parseInt(num[0]);
    int m = Integer.parseInt(num[1]);
    int[][] graph = new int[m][3];
    int[] parents = new int[n];
    int[] size = new int[n];
    int ans = 0;
    for (int i = 0; i < n; i++) {
      parents[i] = -1;
      size[i] = 1;
    }
    for (int i = 0; i < m; i++) {
      String[] ed = bufferedReader.readLine().split(" ");
      graph[i][0] = Integer.parseInt(ed[2]);
      graph[i][1] = Integer.parseInt(ed[0]) - 1;
      graph[i][2] = Integer.parseInt(ed[1]) - 1;
    }
    Arrays.sort(graph, Comparator.comparingInt(arr -> arr[0]));
    for (int i = 0; i < m; i++) {
      if (check(graph[i][1], graph[i][2], parents) == 0) {
        ans += graph[i][0];
        unite(graph[i][1], graph[i][2], parents, size);
      }
    }
    System.out.println(ans);
  }
}
